{"ast":null,"code":"import { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport observeRect from '@reach/observe-rect';\nimport { useIsomorphicLayoutEffect } from '@reach/utils';\n/**\r\n * Welcome to @reach/rect!\r\n *\r\n * Measures DOM elements (aka. bounding client rect).\r\n *\r\n * @see getBoundingClientRect https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\r\n * @see Docs                  https://reacttraining.com/reach-ui/rect\r\n * @see Source                https://github.com/reach/reach-ui/tree/master/packages/rect\r\n */\n\n/**\r\n * Rect\r\n *\r\n * @param props\r\n */\n\nvar Rect = function Rect(_ref) {\n  var onChange = _ref.onChange,\n      _ref$observe = _ref.observe,\n      observe = _ref$observe === void 0 ? true : _ref$observe,\n      children = _ref.children;\n  var ref = useRef(null);\n  var rect = useRect(ref, observe, onChange);\n  return children({\n    ref: ref,\n    rect: rect\n  });\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  Rect.displayName = \"Rect\";\n  Rect.propTypes = {\n    children: PropTypes.func.isRequired,\n    observe: PropTypes.bool,\n    onChange: PropTypes.func\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * useRect\r\n *\r\n * @param nodeRef\r\n * @param observe\r\n * @param onChange\r\n */\n\n\nfunction useRect(nodeRef, observe, onChange) {\n  if (observe === void 0) {\n    observe = true;\n  }\n\n  var initialRectSet = useRef(false);\n\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  var observerRef = useRef(null);\n  useIsomorphicLayoutEffect(function () {\n    var cleanup = function cleanup() {\n      observerRef.current && observerRef.current.unobserve();\n    };\n\n    if (!nodeRef.current) {\n      console.warn(\"You need to place the ref\");\n      return cleanup;\n    }\n\n    if (!observerRef.current) {\n      observerRef.current = observeRect(nodeRef.current, function (rect) {\n        onChange && onChange(rect);\n        setRect(rect);\n      });\n    }\n\n    if (!initialRectSet.current) {\n      initialRectSet.current = true;\n      setRect(nodeRef.current.getBoundingClientRect());\n    }\n\n    observe && observerRef.current.observe();\n    return cleanup; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [observe, onChange]);\n  return rect;\n}\n\nexport default Rect;\nexport { Rect, useRect };","map":{"version":3,"sources":["../src/index.tsx"],"names":["Rect","onChange","observe","children","ref","useRef","rect","useRect","PropTypes","func","nodeRef","initialRectSet","setRect","useState","observerRef","useIsomorphicLayoutEffect","cleanup","console","observeRect"],"mappings":";;;;AAAA;;;;;;;;;;AAiBA;;;;;;IAKaA,IAAI,GAAwB,SAA5BA,IAA4B,CAAA,IAAA,EAAA;MACvCC,QAAAA,GAAAA,IAAAA,CAAAA,Q;0BACAC,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,IAAVA,GAAU,Y;MACVC,QAAAA,GAAAA,IAAAA,CAAAA,Q;AAEA,MAAMC,GAAG,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAA,GAAA,EAAA,OAAA,EAApB,QAAoB,CAApB;AACA,SAAOJ,QAAQ,CAAC;AAAEC,IAAAA,GAAG,EAAL,GAAA;AAAOE,IAAAA,IAAI,EAAJA;AAAP,GAAD,CAAf;AACD,C;;AAwCD,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;AACXN,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACAA,EAAAA,IAAI,CAAJA,SAAAA,GAAiB;AACfG,IAAAA,QAAQ,EAAEK,SAAS,CAATA,IAAAA,CADK,UAAA;AAEfN,IAAAA,OAAO,EAAEM,SAAS,CAFH,IAAA;AAGfP,IAAAA,QAAQ,EAAEO,SAAS,CAACC;AAHL,GAAjBT;AAKD,C,CAAA;;AAID;;;;;;;;;SAOgBO,O,CACdG,O,EACAR,O,EACAD,Q,EAAAA;MADAC,OAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,OAAAA,GAAmB,IAAnBA;;;AAGA,MAAIS,cAAc,GAAGN,MAAM,CAA3B,KAA2B,CAA3B;;kBACsBQ,QAAQ,CAAA,IAAA,C;MAAzBP,IAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAMM,OAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AACX,MAAIE,WAAW,GAAGT,MAAM,CAAxB,IAAwB,CAAxB;AACAU,EAAAA,yBAAyB,CAAC,YAAA;AACxB,QAAMC,OAAO,GAAG,SAAVA,OAAU,GAAA;AACdF,MAAAA,WAAW,CAAXA,OAAAA,IAAuBA,WAAW,CAAXA,OAAAA,CAAvBA,SAAuBA,EAAvBA;AADF,KAAA;;AAIA,QAAI,CAACJ,OAAO,CAAZ,OAAA,EAAsB;AACpBO,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,2BAAAA;AACA,aAAA,OAAA;AACD;;AAED,QAAI,CAACH,WAAW,CAAhB,OAAA,EAA0B;AACxBA,MAAAA,WAAW,CAAXA,OAAAA,GAAsBI,WAAW,CAACR,OAAO,CAAR,OAAA,EAAkB,UAAA,IAAA,EAAA;AACjDT,QAAAA,QAAQ,IAAIA,QAAQ,CAApBA,IAAoB,CAApBA;AACAW,QAAAA,OAAO,CAAPA,IAAO,CAAPA;AAFFE,OAAiC,CAAjCA;AAID;;AAED,QAAI,CAACH,cAAc,CAAnB,OAAA,EAA6B;AAC3BA,MAAAA,cAAc,CAAdA,OAAAA,GAAAA,IAAAA;AACAC,MAAAA,OAAO,CAACF,OAAO,CAAPA,OAAAA,CAARE,qBAAQF,EAAD,CAAPE;AACD;;AAEDV,IAAAA,OAAO,IAAIY,WAAW,CAAXA,OAAAA,CAAXZ,OAAWY,EAAXZ;AACA,WAAA,OAAA,CAvBwB,CAuBxB;AAvBuB,GAAA,EAyBtB,CAAA,OAAA,EAzBHa,QAyBG,CAzBsB,CAAzBA;AA2BA,SAAA,IAAA;AACD","sourcesContent":["/**\n * Welcome to @reach/rect!\n *\n * Measures DOM elements (aka. bounding client rect).\n *\n * @see getBoundingClientRect https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n * @see Docs                  https://reacttraining.com/reach-ui/rect\n * @see Source                https://github.com/reach/reach-ui/tree/master/packages/rect\n */\n\nimport React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport observeRect from \"@reach/observe-rect\";\nimport { useIsomorphicLayoutEffect } from \"@reach/utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Rect\n *\n * @param props\n */\nexport const Rect: React.FC<RectProps> = ({\n  onChange,\n  observe = true,\n  children,\n}) => {\n  const ref = useRef<HTMLElement | null>(null);\n  const rect = useRect(ref, observe, onChange);\n  return children({ ref, rect });\n};\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/rect#rect-props\n */\nexport type RectProps = {\n  /**\n   * Tells `Rect` to observe the position of the node or not. While observing,\n   * the `children` render prop may call back very quickly (especially while\n   * scrolling) so it can be important for performance to avoid observing when\n   * you don't need to.\n   *\n   * This is typically used for elements that pop over other elements (like a\n   * dropdown menu), so you don't need to observe all the time, only when the\n   * popup is active.\n   *\n   * Pass `true` to observe, `false` to ignore.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/rect#rect-observe\n   */\n  observe?: boolean;\n  /**\n   * Calls back whenever the `rect` of the element changes.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/rect#rect-onchange\n   */\n  onChange?: (rect: PRect) => void;\n  /**\n   * A function that calls back to you with a `ref` to place on an element and\n   * the `rect` measurements of the dom node.\n   *\n   * **Note**: On the first render `rect` will be `undefined` because we can't\n   * measure a node that has not yet been rendered. Make sure your code accounts\n   * for this.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/rect#rect-onchange\n   */\n  children(args: { rect: PRect | null; ref: React.Ref<any> }): JSX.Element;\n};\n\nif (__DEV__) {\n  Rect.displayName = \"Rect\";\n  Rect.propTypes = {\n    children: PropTypes.func.isRequired,\n    observe: PropTypes.bool,\n    onChange: PropTypes.func,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * useRect\n *\n * @param nodeRef\n * @param observe\n * @param onChange\n */\nexport function useRect<T extends HTMLElement = HTMLElement>(\n  nodeRef: React.RefObject<T>,\n  observe: boolean = true,\n  onChange?: (rect: DOMRect) => void\n): null | DOMRect {\n  let initialRectSet = useRef(false);\n  let [rect, setRect] = useState<DOMRect | null>(null);\n  let observerRef = useRef<any>(null);\n  useIsomorphicLayoutEffect(() => {\n    const cleanup = () => {\n      observerRef.current && observerRef.current.unobserve();\n    };\n\n    if (!nodeRef.current) {\n      console.warn(\"You need to place the ref\");\n      return cleanup;\n    }\n\n    if (!observerRef.current) {\n      observerRef.current = observeRect(nodeRef.current, (rect: DOMRect) => {\n        onChange && onChange(rect);\n        setRect(rect);\n      });\n    }\n\n    if (!initialRectSet.current) {\n      initialRectSet.current = true;\n      setRect(nodeRef.current.getBoundingClientRect());\n    }\n\n    observe && observerRef.current.observe();\n    return cleanup;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [observe, onChange]);\n\n  return rect;\n}\n\nexport default Rect;\n\nexport type PartialRect = Partial<PRect>;\n\nexport type PRect = Partial<DOMRect> & {\n  readonly bottom: number;\n  readonly height: number;\n  readonly left: number;\n  readonly right: number;\n  readonly top: number;\n  readonly width: number;\n};\n"]},"metadata":{},"sourceType":"module"}